#include <QCoreApplication>
#include <QLocale>
#include <QTranslator>
#include <QSettings>
#include <QHostAddress>
#include <QTcpServer>
#include <QDir>
#include <QFileInfo>

#include "proxyserversocket.h"

int main(int argc, char *argv[])
{
    QCoreApplication::setOrganizationName(QStringLiteral("imrepentek"));
    QCoreApplication::setOrganizationDomain(QStringLiteral("org.imrepentek"));
    QCoreApplication::setApplicationName(QStringLiteral("mitm"));
    QCoreApplication::setApplicationVersion(QStringLiteral("1.0"));

    //EXTERNAL CODE the app and translator related code are autogenerated by qt creator
    QCoreApplication app(argc, argv);

    QTranslator translator;
    const QStringList uiLanguages = QLocale::system().uiLanguages();
    for (const QString &locale : uiLanguages) {
        const QString baseName = "mitm_" + QLocale(locale).name();
        if (translator.load(":/i18n/" + baseName)) {
            app.installTranslator(&translator);
            break;
        }
    }

    QSettings settings;

    if(argc>1)
    {
        const QString host=argv[1];
        if((host==QStringLiteral("ANY"))||(host==QStringLiteral("0.0.0.0"))||(host.isEmpty()))
        {
            settings.setValue(QStringLiteral("listenAddress"),QString());
        }
        else
        {
            settings.setValue(QStringLiteral("listenAddress"),host);
        }
    }

    if(argc>2)
    {
        const QString sport=argv[2];
        bool l;
        uint nport=sport.toUInt(&l);
        if(l)
        {
            if(nport&&(nport<=65535))
            {
                settings.setValue(QStringLiteral("listenPort"),static_cast<quint16>(nport));
            }
        }
    }

    if(!settings.contains(QStringLiteral("listenAddress")))
        settings.setValue(QStringLiteral("listenAddress"),QStringLiteral("127.0.0.1"));

    if(!settings.contains(QStringLiteral("listenPort")))
        settings.setValue(QStringLiteral("listenPort"),QStringLiteral("8080"));

    const QHostAddress listenAddress=settings.value(QStringLiteral("listenAddress")).toString().isEmpty()?QHostAddress::Any:QHostAddress(settings.value(QStringLiteral("listenAddress")).toString());
    quint16 listenPort=settings.value(QStringLiteral("listenPort")).toUInt();

    const QString cadir=SRCDIR "/CA";

    {
        QFileInfo z(cadir);
        if(z.exists()&&(!z.isDir()))
        {
            QString msg=QObject::tr("Fatal error: %1 is not a directory").arg(listenAddress.toString()).arg(listenPort);
            qCritical()<<msg.toUtf8().constData();
            return 1;
        }
        if(!z.exists())
            QDir().mkdir(cadir);
    }

    tProxyServerSocket sock;
    const bool listenSucceeded=sock.listen(listenAddress,listenPort);
    if(!listenSucceeded)
    {
        QString msg=QObject::tr("Fatal error: Failed to listen at %1:%2").arg(listenAddress.toString()).arg(listenPort);
        qCritical()<<msg.toUtf8().constData();
        return 1;
    }

    return app.exec();
}
